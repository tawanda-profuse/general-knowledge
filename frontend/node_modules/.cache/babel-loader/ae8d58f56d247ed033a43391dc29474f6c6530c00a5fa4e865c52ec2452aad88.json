{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TawandaMsengezi\\\\Documents\\\\Upwork\\\\Osama-Client\\\\Khamco Shop\\\\Shop-1\\\\client\\\\src\\\\pages\\\\admin\\\\CustomersData.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Navbar from \"../../components/Navbar\";\nimport AdminPanel from \"../../components/AdminPanel\";\nimport Footer from \"../../components/Footer\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Chart, registerables } from \"chart.js\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst CustomersData = () => {\n  _s();\n  const [message, setMessage] = useState(\"Hello World\");\n  const [militaryCustomers, setMilitaryCustomers] = useState([]);\n  const [civilianCustomers, setCivilianCustomers] = useState([]);\n  const [averageCollarSize, setAverageCollarSize] = useState(0);\n  const [averageHeight, setHeight] = useState(0);\n  const [popularAreas, setPopularAreas] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [invoices, setInvoices] = useState([]);\n  const apiURL = \"http://localhost:5000/admin/customers_data\";\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const fetchCustomerData = async () => {\n      await axios.get(apiURL).then(response => {\n        console.log(response.data);\n        setCustomers(response.data.customers);\n        setMilitaryCustomers(response.data.militaryCustomers);\n        //   setCivilianCustomers(response.data.civilianCustomers);\n        //   setAverageCollarSize(\n        //     customers.reduce(\n        //       (previous, current) =>\n        //         (previous + current.collar) / customers.length,\n        //       0\n        //     )\n        //   );\n        //   setHeight(\n        //     customers.reduce(\n        //       (previous, current) =>\n        //         (previous + current.height) / customers.length,\n        //       0\n        //     )\n        //   );\n        //   setPopularAreas(customers.forEach((customer) => customer.area));\n      }).catch(error => {\n        setMessage(\"There was a problem with the fetch operation.\");\n        console.error(\"There was a problem with the fetch operation:\", error);\n      });\n    };\n    fetchCustomerData();\n  }, []);\n\n  //   useEffect(() => {\n  //     const ctx = chartRef.current.getContext(\"2d\");\n\n  //     const chart = new Chart(ctx, {\n  //       type: \"scatter\",\n  //       data: {\n  //         datasets: [\n  //           {\n  //             label: \"Customers\",\n  //             data: customers.map((customer) => ({\n  //               x: customer.height,\n  //               y: customer.collar,\n  //               name: `${customer.name} ${customer.surname}`,\n  //             })),\n  //             backgroundColor: \"#283688\",\n  //             borderColor: \"#EC1664\",\n  //             borderWidth: 1,\n  //             pointRadius: 10,\n  //           },\n  //         ],\n  //       },\n  //       options: {\n  //         scales: {\n  //           y: {\n  //             title: {\n  //               display: true,\n  //               text: \"Height in Inches\",\n  //               color: \"black\",\n  //               font: {\n  //                 size: 16,\n  //               },\n  //             },\n  //             grid: {\n  //               color: \"#EC1664\",\n  //             },\n  //             ticks: {\n  //               color: \"blue\",\n  //               font: {\n  //                 size: 14,\n  //               },\n  //             },\n  //           },\n  //           x: {\n  //             title: {\n  //               display: true,\n  //               text: \"Collar Diameter in Inches\",\n  //               color: \"black\",\n  //               font: {\n  //                 size: 16,\n  //               },\n  //             },\n  //             grid: {\n  //               color: \"#EC1664\",\n  //             },\n  //             ticks: {\n  //               color: \"blue\",\n  //               font: {\n  //                 size: 14,\n  //               },\n  //             },\n  //           },\n  //         },\n  //         plugins: {\n  //           tooltip: {\n  //             callbacks: {\n  //               label: function (context) {\n  //                 return context.dataset.data[context.dataIndex].name;\n  //               },\n  //               afterLabel: function (context) {\n  //                 return `Height: ${context.parsed.x}, Collar: ${context.parsed.y}`;\n  //               },\n  //             },\n  //           },\n  //           legend: {\n  //             display: true,\n  //             labels: {\n  //               color: \"black\",\n  //               font: {\n  //                 size: 20,\n  //               },\n  //             },\n  //           },\n  //         },\n  //       },\n  //     });\n\n  //     const chartElement = chartRef.current;\n\n  //     // Event listener for click events on the chart\n  //     const handleClick = (event) => {\n  //       const clickedPoint = chart.getElementsAtEventForMode(\n  //         event,\n  //         \"nearest\",\n  //         { intersect: true },\n  //         true\n  //       );\n  //       if (clickedPoint.length > 0) {\n  //         const clickedCustomerIndex = clickedPoint[0].index;\n  //         const clickedCustomer = customers[clickedCustomerIndex];\n  //         window.open(`/customers/${clickedCustomer._id}`, \"_blank\");\n  //       }\n  //     };\n\n  //     chartElement.addEventListener(\"click\", handleClick);\n\n  //     return () => {\n  //       chartElement.removeEventListener(\"click\", handleClick);\n  //       chart.destroy();\n  //     };\n  //   }, [customers]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(AdminPanel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n      src: \"https://cdn.jsdelivr.net/npm/chart.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(CustomersData, \"aMIi73tLtjikJa4g7wyYKC2GwEE=\");\n_c = CustomersData;\nexport default CustomersData;\nvar _c;\n$RefreshReg$(_c, \"CustomersData\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Navbar","AdminPanel","Footer","Link","axios","Chart","registerables","jsxDEV","_jsxDEV","Fragment","_Fragment","register","CustomersData","_s","message","setMessage","militaryCustomers","setMilitaryCustomers","civilianCustomers","setCivilianCustomers","averageCollarSize","setAverageCollarSize","averageHeight","setHeight","popularAreas","setPopularAreas","customers","setCustomers","invoices","setInvoices","apiURL","chartRef","fetchCustomerData","get","then","response","console","log","data","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","src","_c","$RefreshReg$"],"sources":["C:/Users/TawandaMsengezi/Documents/Upwork/Osama-Client/Khamco Shop/Shop-1/client/src/pages/admin/CustomersData.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport Navbar from \"../../components/Navbar\";\r\nimport AdminPanel from \"../../components/AdminPanel\";\r\nimport Footer from \"../../components/Footer\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { Chart, registerables } from \"chart.js\";\r\nChart.register(...registerables);\r\n\r\nconst CustomersData = () => {\r\n  const [message, setMessage] = useState(\"Hello World\");\r\n  const [militaryCustomers, setMilitaryCustomers] = useState([]);\r\n  const [civilianCustomers, setCivilianCustomers] = useState([]);\r\n  const [averageCollarSize, setAverageCollarSize] = useState(0);\r\n  const [averageHeight, setHeight] = useState(0);\r\n  const [popularAreas, setPopularAreas] = useState([]);\r\n  const [customers, setCustomers] = useState([]);\r\n  const [invoices, setInvoices] = useState([]);\r\n  const apiURL = \"http://localhost:5000/admin/customers_data\";\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const fetchCustomerData = async () => {\r\n      await axios\r\n        .get(apiURL)\r\n        .then((response) => {\r\n            console.log(response.data);\r\n          setCustomers(response.data.customers);\r\n          setMilitaryCustomers(response.data.militaryCustomers);\r\n        //   setCivilianCustomers(response.data.civilianCustomers);\r\n        //   setAverageCollarSize(\r\n        //     customers.reduce(\r\n        //       (previous, current) =>\r\n        //         (previous + current.collar) / customers.length,\r\n        //       0\r\n        //     )\r\n        //   );\r\n        //   setHeight(\r\n        //     customers.reduce(\r\n        //       (previous, current) =>\r\n        //         (previous + current.height) / customers.length,\r\n        //       0\r\n        //     )\r\n        //   );\r\n        //   setPopularAreas(customers.forEach((customer) => customer.area));\r\n        })\r\n        .catch((error) => {\r\n          setMessage(\"There was a problem with the fetch operation.\");\r\n          console.error(\"There was a problem with the fetch operation:\", error);\r\n        });\r\n    };\r\n\r\n    fetchCustomerData();\r\n  }, []);\r\n\r\n//   useEffect(() => {\r\n//     const ctx = chartRef.current.getContext(\"2d\");\r\n\r\n//     const chart = new Chart(ctx, {\r\n//       type: \"scatter\",\r\n//       data: {\r\n//         datasets: [\r\n//           {\r\n//             label: \"Customers\",\r\n//             data: customers.map((customer) => ({\r\n//               x: customer.height,\r\n//               y: customer.collar,\r\n//               name: `${customer.name} ${customer.surname}`,\r\n//             })),\r\n//             backgroundColor: \"#283688\",\r\n//             borderColor: \"#EC1664\",\r\n//             borderWidth: 1,\r\n//             pointRadius: 10,\r\n//           },\r\n//         ],\r\n//       },\r\n//       options: {\r\n//         scales: {\r\n//           y: {\r\n//             title: {\r\n//               display: true,\r\n//               text: \"Height in Inches\",\r\n//               color: \"black\",\r\n//               font: {\r\n//                 size: 16,\r\n//               },\r\n//             },\r\n//             grid: {\r\n//               color: \"#EC1664\",\r\n//             },\r\n//             ticks: {\r\n//               color: \"blue\",\r\n//               font: {\r\n//                 size: 14,\r\n//               },\r\n//             },\r\n//           },\r\n//           x: {\r\n//             title: {\r\n//               display: true,\r\n//               text: \"Collar Diameter in Inches\",\r\n//               color: \"black\",\r\n//               font: {\r\n//                 size: 16,\r\n//               },\r\n//             },\r\n//             grid: {\r\n//               color: \"#EC1664\",\r\n//             },\r\n//             ticks: {\r\n//               color: \"blue\",\r\n//               font: {\r\n//                 size: 14,\r\n//               },\r\n//             },\r\n//           },\r\n//         },\r\n//         plugins: {\r\n//           tooltip: {\r\n//             callbacks: {\r\n//               label: function (context) {\r\n//                 return context.dataset.data[context.dataIndex].name;\r\n//               },\r\n//               afterLabel: function (context) {\r\n//                 return `Height: ${context.parsed.x}, Collar: ${context.parsed.y}`;\r\n//               },\r\n//             },\r\n//           },\r\n//           legend: {\r\n//             display: true,\r\n//             labels: {\r\n//               color: \"black\",\r\n//               font: {\r\n//                 size: 20,\r\n//               },\r\n//             },\r\n//           },\r\n//         },\r\n//       },\r\n//     });\r\n\r\n//     const chartElement = chartRef.current;\r\n\r\n//     // Event listener for click events on the chart\r\n//     const handleClick = (event) => {\r\n//       const clickedPoint = chart.getElementsAtEventForMode(\r\n//         event,\r\n//         \"nearest\",\r\n//         { intersect: true },\r\n//         true\r\n//       );\r\n//       if (clickedPoint.length > 0) {\r\n//         const clickedCustomerIndex = clickedPoint[0].index;\r\n//         const clickedCustomer = customers[clickedCustomerIndex];\r\n//         window.open(`/customers/${clickedCustomer._id}`, \"_blank\");\r\n//       }\r\n//     };\r\n\r\n//     chartElement.addEventListener(\"click\", handleClick);\r\n\r\n//     return () => {\r\n//       chartElement.removeEventListener(\"click\", handleClick);\r\n//       chart.destroy();\r\n//     };\r\n//   }, [customers]);\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <main>\r\n        <AdminPanel />\r\n        {/* <section className=\"admin-dashboard\">\r\n          <p className=\"message\">{message}</p>\r\n          <div className=\"khamco-wrapper\">\r\n            <div className=\"metric\">\r\n              <h2>Military Customers</h2>\r\n              <h2 className=\"text-green-500\">{militaryCustomers.length}</h2>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <h2>Civilian Customers</h2>\r\n              <h2 className=\"text-green-500\">{civilianCustomers.length}</h2>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <h2>Average Collar Size</h2>\r\n              <p>Inches</p>\r\n              <h2 className=\"text-green-500\">\r\n                {averageCollarSize.toFixed(2) || \"\"}\r\n              </h2>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <h2>Average Height</h2>\r\n              <p>Inches</p>\r\n              <h2 className=\"text-green-500\">\r\n                {averageHeight.toFixed(2) || \"\"}\r\n              </h2>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <h2>Popular Governorates</h2>\r\n              <p>{popularAreas[0].total || 0} customers</p>\r\n              <h2 className=\"text-green-500\">{popularAreas[0]._id}</h2>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <h2>Popular Areas</h2>\r\n              <p>{popularAreas[0].areas[0].count} customers</p>\r\n              <h2 className=\"text-green-500\">\r\n                {popularAreas[0].areas[0].area}\r\n              </h2>\r\n            </div>\r\n          </div>\r\n          <div className=\"row search-engine\">\r\n            <select id=\"reportChoice\">\r\n              <option disabled>-- Select a report --</option>\r\n              <option>Geography Report</option>\r\n              <option>Customer Report</option>\r\n              <option>Invoice Report</option>\r\n              <option>Data Chart</option>\r\n            </select>\r\n          </div>\r\n          <table>\r\n            <caption>Geography Report</caption>\r\n            <thead>\r\n              <tr>\r\n                <td>Governorate</td>\r\n                <td>Country</td>\r\n                <td>Total Customers</td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {popularAreas.map((area) => (\r\n                <tr>\r\n                  <td>{area._id}</td>\r\n                  <td>Kuwait</td>\r\n                  <td>{area.total} customer(s)</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <table id=\"customer-report\">\r\n            <caption>Customer Data</caption>\r\n            <thead>\r\n              <tr>\r\n                <td>Customer</td>\r\n                <td>Status</td>\r\n                <td>Creation Date</td>\r\n                <td>Membership</td>\r\n                <td>Total Dependents</td>\r\n                <td>Total Spent</td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {customers.map((customer) => (\r\n                <tr>\r\n                  <td>\r\n                    <Link to={`/customers/${customer.id}`} target=\"_blank\">\r\n                      {customer.name} {customer.surname}{\" \"}\r\n                      <i className=\"fas fa-external-link\"></i>\r\n                    </Link>\r\n                  </td>\r\n                  <td className=\"capitalize\">{customer.status}</td>\r\n                  <td>\r\n                    {customer.date_created.toLocaleDateString(\"en-US\", {\r\n                      month: \"long\",\r\n                      year: \"numeric\",\r\n                      day: \"numeric\",\r\n                    })}\r\n                  </td>\r\n                  {customer.membership_status === \"VIP\" ? (\r\n                    <td>\r\n                      {customer.membership_status}{\" \"}\r\n                      <i className=\"fas fa-star blink\"></i>\r\n                    </td>\r\n                  ) : (\r\n                    <td>{customer.membership_status}</td>\r\n                  )}\r\n                  <td>{customer.dependents.length}</td>\r\n                  <td>\r\n                    KWD{\" \"}\r\n                    {new Intl.NumberFormat(\"en-US\").format(\r\n                      customer.amount_spent\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <table id=\"invoice-report\">\r\n            <caption>Recent Activity</caption>\r\n            <thead>\r\n              <tr>\r\n                <td>Invoice ID</td>\r\n                <td>Customer</td>\r\n                <td>Date</td>\r\n                <td>Contact</td>\r\n                <td>Payment Status</td>\r\n                <td>Amount Paid</td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {invoices.map((invoice) => (\r\n                <tr>\r\n                  <td>\r\n                    <a\r\n                      href={`/invoices/${invoice.id}`}\r\n                      target=\"_blank\"\r\n                      rel=\"noreferrer\"\r\n                    >\r\n                      {invoice.uniqueId}{\" \"}\r\n                      <i className=\"fas fa-external-link\"></i>\r\n                    </a>\r\n                  </td>\r\n                  <td>\r\n                    {invoice.customer_name} {invoice.customer_surname}\r\n                  </td>\r\n                  <td>\r\n                    {invoice.date.toLocaleDateString(\"en-US\", {\r\n                      month: \"long\",\r\n                      day: \"numeric\",\r\n                      year: \"numeric\",\r\n                    })}\r\n                  </td>\r\n                  <td>\r\n                    <a href={`tel:${invoice.customer_phone}`}>\r\n                      {invoice.customer_phone}\r\n                    </a>\r\n                  </td>\r\n                  <td\r\n                    className={`${\r\n                      invoice.payment_status === \"Paid\"\r\n                        ? \"text-green-500\"\r\n                        : invoice.payment_status === \"Partially Paid\"\r\n                        ? \"text-orange-500\"\r\n                        : \"text-red-500\"\r\n                    }`}\r\n                  >\r\n                    {invoice.payment_status}\r\n                  </td>\r\n                  <td>KWD {invoice.amount_paid}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <div className=\"row\" id=\"data-chart\">\r\n            <canvas\r\n              id=\"customerChart\"\r\n              width=\"400\"\r\n              height=\"150\"\r\n              ref={chartRef}\r\n            ></canvas>\r\n          </div>\r\n        </section> */}\r\n      </main>\r\n      <Footer />\r\n      <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomersData;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,UAAU,MAAM,6BAA6B;AACpD,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAChDL,KAAK,CAACM,QAAQ,CAAC,GAAGL,aAAa,CAAC;AAEhC,MAAMM,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,aAAa,CAAC;EACrD,MAAM,CAACiB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACmB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACqB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACuB,aAAa,EAAEC,SAAS,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC2B,SAAS,EAAEC,YAAY,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM+B,MAAM,GAAG,4CAA4C;EAC3D,MAAMC,QAAQ,GAAGjC,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,MAAMmC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,MAAM5B,KAAK,CACR6B,GAAG,CAACH,MAAM,CAAC,CACXI,IAAI,CAAEC,QAAQ,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC;QAC5BX,YAAY,CAACQ,QAAQ,CAACG,IAAI,CAACZ,SAAS,CAAC;QACrCT,oBAAoB,CAACkB,QAAQ,CAACG,IAAI,CAACtB,iBAAiB,CAAC;QACvD;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACA,CAAC,CAAC,CACDuB,KAAK,CAAEC,KAAK,IAAK;QAChBzB,UAAU,CAAC,+CAA+C,CAAC;QAC3DqB,OAAO,CAACI,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACvE,CAAC,CAAC;IACN,CAAC;IAEDR,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;;EAER;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEE,oBACExB,OAAA,CAAAE,SAAA;IAAA+B,QAAA,gBACEjC,OAAA,CAACR,MAAM;MAAA0C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVrC,OAAA;MAAAiC,QAAA,eACEjC,OAAA,CAACP,UAAU;QAAAyC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAoLV,CAAC,eACPrC,OAAA,CAACN,MAAM;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVrC,OAAA;MAAQsC,GAAG,EAAC;IAAuC;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA,eAC7D,CAAC;AAEP,CAAC;AAAChC,EAAA,CA1VID,aAAa;AAAAmC,EAAA,GAAbnC,aAAa;AA4VnB,eAAeA,aAAa;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}