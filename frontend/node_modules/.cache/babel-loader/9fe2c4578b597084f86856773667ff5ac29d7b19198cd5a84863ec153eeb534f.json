{"ast":null,"code":"import { isTag, hasChildren } from \"domhandler\";\n/**\n * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nexport function filter(test, node, recurse = true, limit = Infinity) {\n  return find(test, Array.isArray(node) ? node : [node], recurse, limit);\n}\n/**\n * Search an array of nodes and their children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nexport function find(test, nodes, recurse, limit) {\n  const result = [];\n  /** Stack of the arrays we are looking at. */\n  const nodeStack = [nodes];\n  /** Stack of the indices within the arrays. */\n  const indexStack = [0];\n  for (;;) {\n    // First, check if the current array has any more elements to look at.\n    if (indexStack[0] >= nodeStack[0].length) {\n      // If we have no more arrays to look at, we are done.\n      if (indexStack.length === 1) {\n        return result;\n      }\n      // Otherwise, remove the current array from the stack.\n      nodeStack.shift();\n      indexStack.shift();\n      // Loop back to the start to continue with the next array.\n      continue;\n    }\n    const elem = nodeStack[0][indexStack[0]++];\n    if (test(elem)) {\n      result.push(elem);\n      if (--limit <= 0) return result;\n    }\n    if (recurse && hasChildren(elem) && elem.children.length > 0) {\n      /*\n       * Add the children to the stack. We are depth-first, so this is\n       * the next array we look at.\n       */\n      indexStack.unshift(0);\n      nodeStack.unshift(elem.children);\n    }\n  }\n}\n/**\n * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n * @deprecated Use `Array.prototype.find` directly.\n */\nexport function findOneChild(test, nodes) {\n  return nodes.find(test);\n}\n/**\n * Finds one element in a tree that passes a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Node or array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first node that passes `test`.\n */\nexport function findOne(test, nodes, recurse = true) {\n  let elem = null;\n  for (let i = 0; i < nodes.length && !elem; i++) {\n    const node = nodes[i];\n    if (!isTag(node)) {\n      continue;\n    } else if (test(node)) {\n      elem = node;\n    } else if (recurse && node.children.length > 0) {\n      elem = findOne(test, node.children, true);\n    }\n  }\n  return elem;\n}\n/**\n * Checks if a tree of nodes contains at least one node passing a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing the test.\n */\nexport function existsOne(test, nodes) {\n  return nodes.some(checked => isTag(checked) && (test(checked) || existsOne(test, checked.children)));\n}\n/**\n * Search an array of nodes and their children for elements passing a test function.\n *\n * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\nexport function findAll(test, nodes) {\n  const result = [];\n  const nodeStack = [nodes];\n  const indexStack = [0];\n  for (;;) {\n    if (indexStack[0] >= nodeStack[0].length) {\n      if (nodeStack.length === 1) {\n        return result;\n      }\n      // Otherwise, remove the current array from the stack.\n      nodeStack.shift();\n      indexStack.shift();\n      // Loop back to the start to continue with the next array.\n      continue;\n    }\n    const elem = nodeStack[0][indexStack[0]++];\n    if (!isTag(elem)) continue;\n    if (test(elem)) result.push(elem);\n    if (elem.children.length > 0) {\n      indexStack.unshift(0);\n      nodeStack.unshift(elem.children);\n    }\n  }\n}","map":{"version":3,"names":["isTag","hasChildren","filter","test","node","recurse","limit","Infinity","find","Array","isArray","nodes","result","nodeStack","indexStack","length","shift","elem","push","children","unshift","findOneChild","findOne","i","existsOne","some","checked","findAll"],"sources":["https://raw.githubusercontent.com/fb55/domutils/96c989e159c98218958f375ea04210f2d1b43c0c/src/querying.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}