{"version":3,"file":"static/js/440.83b848ad.chunk.js","mappings":"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","sources":["components/Quiz.jsx"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nconst Quiz = () => {\r\n  const { category } = useParams();\r\n  const apiUrl = window.location.origin.includes(\"localhost\")\r\n    ? \"http://localhost:8000\"\r\n    : \"https://general-knowledge-eta.vercel.app\";\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [displayResult, setDisplayResult] = useState(true);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [nextButton, setNextButton] = useState(false);\r\n  const [answerScore, setAnswerScore] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [timer, setTimer] = useState(15);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await axios\r\n        .get(`${apiUrl}/${category}`)\r\n        .then((response) => {\r\n          document.title = `QuizVibe - ${response.data.questions[0].category} Quiz`;\r\n          setQuestions(response.data.questions);\r\n        })\r\n        .catch((error) => {\r\n          navigate(\"/\");\r\n          console.error(\"Error: \", error);\r\n          toast.error(error.response.data?.message || error.message);\r\n        })\r\n        .finally(() => {\r\n          setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [apiUrl, category, navigate]);\r\n\r\n  const setNextQuestion = () => {\r\n    setCurrentQuestionIndex((prev) => prev + 1);\r\n  };\r\n\r\n  const runTimer = () => {\r\n    if (timer < 0) {\r\n      setTimer(15);\r\n      return;\r\n    }\r\n\r\n    setInterval(() => {\r\n      setTimer((prev) => prev - 1);\r\n    }, 1000);\r\n  };\r\n\r\n  const startGame = () => {\r\n    setGameStarted(true);\r\n    setNextButton(true);\r\n    setCurrentQuestionIndex(0);\r\n    runTimer();\r\n  };\r\n\r\n  const selectAnswer = useCallback(\r\n    (correct, questionLength) => {\r\n      setNextQuestion();\r\n      setTimer(15);\r\n      if (correct) {\r\n        setAnswerScore((prev) => prev + 1);\r\n      }\r\n\r\n      if (currentQuestionIndex === questionLength - 1) {\r\n        setDisplayResult(true);\r\n      }\r\n    },\r\n    [currentQuestionIndex]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (timer < 0) {\r\n      selectAnswer(false, questions[0].quiz.length);\r\n      setTimer(15);\r\n    }\r\n  }, [questions, timer, currentQuestionIndex, selectAnswer]);\r\n\r\n  return (\r\n    <>\r\n      {isLoading && (\r\n        <div className=\"absolute left-2/4 top-2/4 -translate-x-2/4 -translate-y-2/4 w-[90%] max-w-[90%] md:w-[800px] md:max-w-[80%] h-[50vh] bg-[#999] animate-pulse rounded-[5px] p-[10px] shadow-md\"></div>\r\n      )}\r\n      {!isLoading && (\r\n        <div className=\"absolute left-2/4 top-2/4 -translate-x-2/4 -translate-y-2/4 w-[90%] max-w-[90%] md:w-[800px] md:max-w-[80%] bg-[white] rounded-[5px] p-[10px] shadow-md min-h-[50vh] max-h-[80vh] overflow-auto\">\r\n          {gameStarted && (\r\n            <>\r\n              <div>\r\n                {questions[0].quiz.length > 0 && (\r\n                  <>\r\n                    {currentQuestionIndex < questions[0].quiz.length && (\r\n                      <>\r\n                        <div className=\"flex flex-col md:flex-row items-center justify-between my-[1rem] px-[1rem] gap-[1rem]\">\r\n                          <h3 className=\"font-bold text-lg\">\r\n                            Question {currentQuestionIndex + 1} of{\" \"}\r\n                            {questions[0].quiz.length}\r\n                          </h3>\r\n                          <span\r\n                            className={`py-[0.5rem] px-[20px] ${\r\n                              timer <= 3 ? \"bg-[red]\" : \"bg-[green]\"\r\n                            } text-white text-[1.2rem] font-bold font-mono`}\r\n                          >\r\n                            {timer < 10 ? \"0\" : \"\"}\r\n                            {timer}\r\n                          </span>\r\n                          {nextButton && (\r\n                            <button\r\n                              id=\"next-btn\"\r\n                              className=\"text-[1.5rem] font-bold py-[10px] px-[20px] cursor-pointer btn\"\r\n                              onClick={() =>\r\n                                selectAnswer(false, questions[0].quiz.length)\r\n                              }\r\n                            >\r\n                              Next\r\n                            </button>\r\n                          )}\r\n                          <div\r\n                            className={` bg-[yellow] text-[black] py-[0.5rem] px-[1rem] rounded-md ${\r\n                              displayResult ? \"block\" : \"hidden\"\r\n                            }`}\r\n                          >\r\n                            <h4>{`Your score: ${answerScore}${\r\n                              currentQuestionIndex >= questions[0].quiz.length\r\n                                ? `/${questions[0].quiz.length}`\r\n                                : \"\"\r\n                            }`}</h4>\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <h1>\r\n                            {questions[0].quiz[currentQuestionIndex]?.question}\r\n                          </h1>\r\n                        </div>\r\n                        <br />\r\n                        <div className=\"question-picture\">\r\n                          <img\r\n                            lazy\r\n                            className=\"w-full md:w-[20rem] h-[12rem]\"\r\n                            alt={\r\n                              questions[0].quiz[currentQuestionIndex]?.category\r\n                            }\r\n                            src={\r\n                              questions[0].quiz[currentQuestionIndex]?.picture\r\n                            }\r\n                          />\r\n                        </div>\r\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-[10px] my-[20px] mx-0\">\r\n                          {questions[0].quiz[\r\n                            currentQuestionIndex\r\n                          ]?.answers?.map((answer, index) => (\r\n                            <button\r\n                              className=\"btn\"\r\n                              key={index}\r\n                              onClick={() =>\r\n                                selectAnswer(\r\n                                  answer.correct,\r\n                                  questions[0].quiz.length\r\n                                )\r\n                              }\r\n                            >\r\n                              {answer.text}\r\n                            </button>\r\n                          ))}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </>\r\n                )}\r\n                {currentQuestionIndex >= questions[0].quiz.length && (\r\n                  <div className=\"flex flex-col items-center gap-[2rem] my-[4rem]\">\r\n                    <h1 className=\"text-[#440066] font-bold text-[3rem]\">\r\n                      Complete!\r\n                    </h1>\r\n                    <div\r\n                      className={` bg-[yellow] text-[black] py-[0.5rem] px-[1rem] rounded-md ${\r\n                        displayResult ? \"block\" : \"hidden\"\r\n                      }`}\r\n                    >\r\n                      <h4>{`Your score: ${answerScore}${\r\n                        currentQuestionIndex >= questions[0].quiz.length\r\n                          ? `/${questions[0].quiz.length}`\r\n                          : \"\"\r\n                      }`}</h4>\r\n                    </div>\r\n                    <button\r\n                      onClick={() => window.location.reload()}\r\n                      className=\"text-[1.5rem] font-bold py-[10px] px-[20px] cursor-pointer btn\"\r\n                    >\r\n                      Retry\r\n                    </button>\r\n                    <table className=\"w-[90%] md:w-3/4\">\r\n                      <caption className=\"font-bold text-[purple] mb-[1rem]\">\r\n                        How well did you do?\r\n                      </caption>\r\n                      <thead>\r\n                        <tr>\r\n                          <th className=\"border border-[black] p-[0.1rem]\">\r\n                            Number\r\n                          </th>\r\n                          <th className=\"border border-[black] p-[0.1rem]\">\r\n                            Question\r\n                          </th>\r\n                          <th className=\"border border-[black] p-[0.1rem]\">\r\n                            Answer\r\n                          </th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {questions[0]?.quiz?.map((item, index) => (\r\n                          <tr key={index}>\r\n                            <td className=\"border border-[black] p-[0.1rem] text-center\">\r\n                              {index + 1}\r\n                            </td>\r\n                            <td className=\"border border-[black] p-[0.1rem]\">\r\n                              {item.question}\r\n                            </td>\r\n                            <td className=\"border border-[black] p-[0.1rem] text-center\">\r\n                              {\r\n                                item.answers.find((answer) => answer.correct)\r\n                                  .text\r\n                              }\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n          {!gameStarted && (\r\n            <div className=\"flex flex-col items-center gap-[1rem] my-[2rem]\">\r\n              <h1 className=\"text-[#440066] font-bold text-[3rem] underline text-center md:text-balance\">\r\n                {questions[0]?.category} Quiz\r\n              </h1>\r\n              <p className=\"text-center md:text-balance my-[1rem] font-mono\">\r\n                You've got 15 seconds per question. Press{\" \"}\r\n                <q>\r\n                  <span className=\"font-bold\">start</span>\r\n                </q>{\" \"}\r\n                when you are ready.\r\n              </p>\r\n            </div>\r\n          )}\r\n          <div className=\"flex justify-center items-center\">\r\n            {!gameStarted && (\r\n              <button\r\n                onClick={startGame}\r\n                className=\"text-[1.5rem] font-bold py-[10px] px-[20px] cursor-pointer btn\"\r\n              >\r\n                Start\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n"],"names":["Quiz","_questions$0$quiz$cur","_questions$0$quiz$cur2","_questions$0$quiz$cur3","_questions$0$quiz$cur4","_questions$0$quiz$cur5","_questions$","_questions$$quiz","_questions$2","category","useParams","apiUrl","window","location","origin","includes","gameStarted","setGameStarted","useState","displayResult","setDisplayResult","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","nextButton","setNextButton","answerScore","setAnswerScore","isLoading","setIsLoading","timer","setTimer","navigate","useNavigate","useEffect","async","axios","get","concat","then","response","document","title","data","catch","error","_error$response$data","console","toast","message","finally","fetchData","selectAnswer","useCallback","correct","questionLength","prev","quiz","length","_jsxs","_Fragment","children","_jsx","className","id","onClick","question","lazy","alt","src","picture","answers","map","answer","index","text","reload","item","find","startGame","setInterval"],"sourceRoot":""}