{"version":3,"file":"static/js/440.33e1296d.chunk.js","mappings":"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","sources":["components/Quiz.jsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\n\r\nconst Quiz = () => {\r\n  const { category } = useParams();\r\n  const apiUrl = process.env.NODE_ENV === \"development\"\r\n    ? \"http://localhost:8000\"\r\n    : \"https://general-knowledge-eta.vercel.app\";\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [displayResult, setDisplayResult] = useState(true);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [nextButton, setNextButton] = useState(false);\r\n  const [answerScore, setAnswerScore] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [timer, setTimer] = useState(15);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const prevPathRef = useRef(location.pathname);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await axios\r\n        .get(`${apiUrl}/${category}`)\r\n        .then((response) => {\r\n          document.title = `QuizVibe - ${response.data.questions[0].category} Quiz`;\r\n          setQuestions(response.data.questions);\r\n        })\r\n        .catch((error) => {\r\n          navigate(\"/\");\r\n          console.error(\"Error: \", error);\r\n          toast.error(error.response.data?.message || error.message);\r\n        })\r\n        .finally(() => {\r\n          setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [apiUrl, category, navigate]);\r\n\r\n  useEffect(() => {\r\n    // If the path has changed, reload the page\r\n    if (prevPathRef.current !== location.pathname) {\r\n      window.location.reload();\r\n    }\r\n    prevPathRef.current = location.pathname;\r\n  }, [location.pathname]);\r\n\r\n  const setNextQuestion = () => {\r\n    setCurrentQuestionIndex((prev) => prev + 1);\r\n  };\r\n\r\n  const runTimer = () => {\r\n    if (timer < 0) {\r\n      setTimer(15);\r\n      return;\r\n    }\r\n\r\n    setInterval(() => {\r\n      setTimer((prev) => prev - 1);\r\n    }, 1000);\r\n  };\r\n\r\n  const startGame = () => {\r\n    setGameStarted(true);\r\n    setNextButton(true);\r\n    setCurrentQuestionIndex(0);\r\n    runTimer();\r\n  };\r\n\r\n  const selectAnswer = useCallback(\r\n    (correct, questionLength) => {\r\n      setNextQuestion();\r\n      setTimer(15);\r\n      if (correct) {\r\n        setAnswerScore((prev) => prev + 1);\r\n      }\r\n\r\n      if (currentQuestionIndex === questionLength - 1) {\r\n        setDisplayResult(true);\r\n      }\r\n    },\r\n    [currentQuestionIndex]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (timer < 0) {\r\n      selectAnswer(false, questions[0].quiz.length);\r\n      setTimer(15);\r\n    }\r\n  }, [questions, timer, currentQuestionIndex, selectAnswer]);\r\n\r\n  return (\r\n    <>\r\n      {isLoading && (\r\n        <div className=\"absolute left-2/4 top-2/4 -translate-x-2/4 -translate-y-2/4 w-[90%] max-w-[90%] md:w-[800px] md:max-w-[80%] h-[50vh] bg-[#999] animate-pulse rounded-[5px] p-[10px] shadow-md\"></div>\r\n      )}\r\n      {!isLoading && (\r\n        <div className=\"absolute left-2/4 top-2/4 -translate-x-2/4 -translate-y-2/4 w-[90%] max-w-[90%] md:w-[800px] md:max-w-[80%] bg-[white] rounded-[5px] p-[10px] shadow-md min-h-[50vh] max-h-[80vh] overflow-auto\">\r\n          {gameStarted && (\r\n            <>\r\n              <div>\r\n                {questions[0].quiz.length > 0 && (\r\n                  <>\r\n                    {currentQuestionIndex < questions[0].quiz.length && (\r\n                      <>\r\n                        <div className=\"flex flex-col md:flex-row items-center justify-between my-[1rem] px-[1rem] gap-[1rem]\">\r\n                          <h3 className=\"font-bold text-lg\">\r\n                            Question {currentQuestionIndex + 1} of{\" \"}\r\n                            {questions[0].quiz.length}\r\n                          </h3>\r\n                          <span\r\n                            className={`py-[0.5rem] px-[20px] ${\r\n                              timer <= 3 ? \"bg-[red]\" : \"bg-[green]\"\r\n                            } text-white text-[1.2rem] font-bold font-mono`}\r\n                          >\r\n                            {timer < 10 ? \"0\" : \"\"}\r\n                            {timer}\r\n                          </span>\r\n                          {nextButton && (\r\n                            <button\r\n                              id=\"next-btn\"\r\n                              className=\"text-[1.5rem] font-bold py-[10px] px-[20px] cursor-pointer btn\"\r\n                              onClick={() =>\r\n                                selectAnswer(false, questions[0].quiz.length)\r\n                              }\r\n                            >\r\n                              Next\r\n                            </button>\r\n                          )}\r\n                          <div\r\n                            className={` bg-[yellow] text-[black] py-[0.5rem] px-[1rem] rounded-md ${\r\n                              displayResult ? \"block\" : \"hidden\"\r\n                            }`}\r\n                          >\r\n                            <h4>{`Your score: ${answerScore}${\r\n                              currentQuestionIndex >= questions[0].quiz.length\r\n                                ? `/${questions[0].quiz.length}`\r\n                                : \"\"\r\n                            }`}</h4>\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <h1>\r\n                            {questions[0].quiz[currentQuestionIndex]?.question}\r\n                          </h1>\r\n                        </div>\r\n                        <br />\r\n                        <div className=\"question-picture\">\r\n                          <img\r\n                            lazy\r\n                            className=\"w-full md:w-[20rem] h-[12rem]\"\r\n                            alt={\r\n                              questions[0].quiz[currentQuestionIndex]?.category\r\n                            }\r\n                            src={\r\n                              questions[0].quiz[currentQuestionIndex]?.picture\r\n                            }\r\n                          />\r\n                        </div>\r\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-[10px] my-[20px] mx-0\">\r\n                          {questions[0].quiz[\r\n                            currentQuestionIndex\r\n                          ]?.answers?.map((answer, index) => (\r\n                            <button\r\n                              className=\"btn\"\r\n                              key={index}\r\n                              onClick={() =>\r\n                                selectAnswer(\r\n                                  answer.correct,\r\n                                  questions[0].quiz.length\r\n                                )\r\n                              }\r\n                            >\r\n                              {answer.text}\r\n                            </button>\r\n                          ))}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </>\r\n                )}\r\n                {currentQuestionIndex >= questions[0].quiz.length && (\r\n                  <div className=\"flex flex-col items-center gap-[2rem] my-[4rem]\">\r\n                    <h1 className=\"text-[#440066] font-bold text-[3rem]\">\r\n                      Complete!\r\n                    </h1>\r\n                    <div\r\n                      className={` bg-[yellow] text-[black] py-[0.5rem] px-[1rem] rounded-md ${\r\n                        displayResult ? \"block\" : \"hidden\"\r\n                      }`}\r\n                    >\r\n                      <h4>{`Your score: ${answerScore}${\r\n                        currentQuestionIndex >= questions[0].quiz.length\r\n                          ? `/${questions[0].quiz.length}`\r\n                          : \"\"\r\n                      }`}</h4>\r\n                    </div>\r\n                    <button\r\n                      onClick={() => window.location.reload()}\r\n                      className=\"text-[1.5rem] font-bold py-[10px] px-[20px] cursor-pointer btn\"\r\n                    >\r\n                      Retry\r\n                    </button>\r\n                    <table className=\"w-[90%] md:w-3/4\">\r\n                      <caption className=\"font-bold text-[purple] mb-[1rem]\">\r\n                        How well did you do?\r\n                      </caption>\r\n                      <thead>\r\n                        <tr>\r\n                          <th className=\"border border-[black] p-[0.1rem]\">\r\n                            Number\r\n                          </th>\r\n                          <th className=\"border border-[black] p-[0.1rem]\">\r\n                            Question\r\n                          </th>\r\n                          <th className=\"border border-[black] p-[0.1rem]\">\r\n                            Answer\r\n                          </th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {questions[0]?.quiz?.map((item, index) => (\r\n                          <tr key={index}>\r\n                            <td className=\"border border-[black] p-[0.1rem] text-center\">\r\n                              {index + 1}\r\n                            </td>\r\n                            <td className=\"border border-[black] p-[0.1rem]\">\r\n                              {item.question}\r\n                            </td>\r\n                            <td className=\"border border-[black] p-[0.1rem] text-center\">\r\n                              {\r\n                                item.answers.find((answer) => answer.correct)\r\n                                  .text\r\n                              }\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n          {!gameStarted && (\r\n            <div className=\"flex flex-col items-center gap-[1rem] my-[2rem]\">\r\n              <h1 className=\"text-[#440066] font-bold text-[3rem] underline text-center md:text-balance\">\r\n                {questions[0]?.category} Quiz\r\n              </h1>\r\n              <p className=\"text-center md:text-balance my-[1rem] font-mono\">\r\n                You've got 15 seconds per question. Press{\" \"}\r\n                <q>\r\n                  <span className=\"font-bold\">start</span>\r\n                </q>{\" \"}\r\n                when you are ready.\r\n              </p>\r\n            </div>\r\n          )}\r\n          <div className=\"flex justify-center items-center\">\r\n            {!gameStarted && (\r\n              <button\r\n                onClick={startGame}\r\n                className=\"text-[1.5rem] font-bold py-[10px] px-[20px] cursor-pointer btn\"\r\n              >\r\n                Start\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n"],"names":["Quiz","_questions$0$quiz$cur","_questions$0$quiz$cur2","_questions$0$quiz$cur3","_questions$0$quiz$cur4","_questions$0$quiz$cur5","_questions$","_questions$$quiz","_questions$2","category","useParams","apiUrl","gameStarted","setGameStarted","useState","displayResult","setDisplayResult","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","nextButton","setNextButton","answerScore","setAnswerScore","isLoading","setIsLoading","timer","setTimer","navigate","useNavigate","location","useLocation","prevPathRef","useRef","pathname","useEffect","async","axios","get","concat","then","response","document","title","data","catch","error","_error$response$data","console","toast","message","finally","fetchData","current","window","reload","selectAnswer","useCallback","correct","questionLength","prev","quiz","length","_jsxs","_Fragment","children","_jsx","className","id","onClick","question","lazy","alt","src","picture","answers","map","answer","index","text","item","find","startGame","setInterval"],"sourceRoot":""}